<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on Welcome to Way&#39;s home page.</title>
    <link>https://gohugo-theme-ananke.pages.dev/tags/go/</link>
    <description>Recent content in go on Welcome to Way&#39;s home page.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Nov 2019 17:18:11 +0800</lastBuildDate><atom:link href="https://gohugo-theme-ananke.pages.dev/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go多协程爬取阿里云资源</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go%E5%B9%B6%E5%8F%91%E4%B8%8B%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E8%B5%84%E6%BA%90/</link>
      <pubDate>Thu, 28 Nov 2019 17:18:11 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go%E5%B9%B6%E5%8F%91%E4%B8%8B%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E8%B5%84%E6%BA%90/</guid>
      <description>用go写了个爬取好未来存放在阿里云oss的音频附件，代码如下： package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;github.com/aliyun/aliyun-oss-go-sdk/oss&amp;#34; ) var _ClassIds = []string{} const ( Endpoint string = &amp;#34;http://oss-cn-beijing.aliyuncs.com&amp;#34; AccessID string = &amp;#34;这里存放阿里云accessId&amp;#34; AccessKey string = &amp;#34;这里存放阿里云accessKey&amp;#34; RootPath string = &amp;#34;classrecord/&amp;#34; getLessonApi string = &amp;#34;获取大班ID API&amp;#34; getPaperApi string = &amp;#34;获取大班ID试题API&amp;#34; ) // todo 如果解析csv文件，这里创建一个struct 保存课程信息 // type CLassInfo struct { // Cid string // Cnum string // } type ClassInfo struct { Id int `json:&amp;#34;id&amp;#34;` LiveNumberId string `json:&amp;#34;liveNumberId&amp;#34;` } type Result struct { Result ClassInfo `json:&amp;#34;result&amp;#34;` } type Task struct { TaskId int64 `json:&amp;#34;taskId&amp;#34;` Stem string `json:&amp;#34;stem&amp;#34;` } type Paper struct { PaperId int64 `json:&amp;#34;paperId&amp;#34;` Tasks []Task `json:&amp;#34;tasks&amp;#34;` } //taskId&amp;gt;stem Map type type TaskMap map[string]string func iterationClassIdWorker(id int, path chan string, bk *oss.</description>
    </item>
    
    <item>
      <title>Quicksort</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/quicksort/</link>
      <pubDate>Wed, 09 Oct 2019 15:06:26 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/quicksort/</guid>
      <description>golang实现快速排序 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func QuickSort(slc []int) []int { middleIndex := len(slc) / 2 middleItem := slc[middleIndex] leftSlc := []int {} rightSlc := []int {} for i := 0; i &amp;lt; len(slc); i++ { if i == middleIndex { continue } if slc[i] &amp;lt;= middleItem { leftSlc = append(leftSlc, slc[i]) }else { rightSlc = append(rightSlc, slc[i]) } } return append(append(QuickSort(leftSlc), middleItem), QuickSort(rightSlc)...) } func main() { slc := []int {} for i := 0; i &amp;lt; 10; i++ { slc = append(slc, rand.</description>
    </item>
    
    <item>
      <title>Go Defer</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go-defer/</link>
      <pubDate>Wed, 04 Sep 2019 09:41:06 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go-defer/</guid>
      <description>defer 作用 go语言中有defer关键字；
其作用类似于js中的finally，用于清除函数所占系统资源；
defer 用法 defer用在一个函数的函数体内; defer关键词后跟一个函数调用，后面所跟的函数调用和普通的函数调用没有区别；
如果defer函数有返回值，则函数执行完毕之后返回值会被丢弃。
defer 关键字执行函数的时机：
外部函数执行return语句时 函数执行结束 goroutine报错（panick） 如果外部函数有return表达式，defer函数会在return表达式设置值之后，return之前执行； 比如：
// f returns 42 func f() (result int) { defer func() { // result is accessed after it was set to 6 by the return statement result *= 7 }() return 6 } defer函数可以访问外部函数的变量；
如果有多个defer表达式，执行顺序为从最后一个到第一个；
lock(l) defer unlock(l) // unlocking happens before surrounding function returns // prints 3 2 1 0 before surrounding function returns for i := 0; i &amp;lt;= 3; i++ { defer fmt.</description>
    </item>
    
    <item>
      <title>Go Function Closure</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go-function-closure/</link>
      <pubDate>Tue, 27 Aug 2019 13:42:13 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go-function-closure/</guid>
      <description>go语言中的closure（闭包） go语言和JavaScript都支持closure（闭包）；
匿名函数被常用来实现闭包，go语言中也支持匿名函数；
closure的定义是：一个函数可以访问其函数体外的变量，我们称这个函数为closure（闭包）；
如下：
package main import &amp;#34;fmt&amp;#34; // fibonacci is a function that returns // a function that returns an int. func fibonacci() func(int) int { a := 0 b := 0 return func(x int) int { if x == 0 { return 0 } if x == 1 { b = 1 return 1 } s := a + b a = b b = s return s } } func main() { f := fibonacci() for i := 0; i &amp;lt; 10; i++ { fmt.</description>
    </item>
    
    <item>
      <title>Go Pointer Receiver</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go-pointer-receiver/</link>
      <pubDate>Mon, 26 Aug 2019 14:13:02 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go-pointer-receiver/</guid>
      <description>golang struct类型 go语言中没有class概念，但有一个struct类型，可以实现class。 struct中可以包含基础类型做为其属性，比如boolean、string、int、float等， 实例化可通过v :=T{}，其中，打括号中是struct的属性值，类似面向对象语言中实例化一个class所用的new。
golang pointer类型 go语言中，如果一个变量存储的是另一个变量所在的地址，则这个变量的类型为pointer类型，也就是指针；
比如：
var house = &amp;#34;I am a string!&amp;#34; padr := &amp;amp;house 变量padr就是一个pointer类型的变量，其存储的是字符串house的地址； 打印出来，就类似“0xc000084030”， 打印类型，则为“*string” 在golang中，指针类型就是“*T”
golang methods with pointer receiver go语言中的方法可以被指针类型所接收，该值可以为pointe类型，通过这种关系，可以把struct和该方法关联；
这种隐式的给struct指定方法的方式可以引用一句名言：if it looks like a duck, work like a duck and quacks like a duck it must be a duck.
比如：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) type Vertex struct { X, Y float64 } func (v Vertex) Abs() float64 { return math.</description>
    </item>
    
  </channel>
</rss>
