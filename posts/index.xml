<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Welcome to Way&#39;s home page.</title>
    <link>https://gohugo-theme-ananke.pages.dev/posts/</link>
    <description>Recent content in Posts on Welcome to Way&#39;s home page.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Mar 2023 13:05:01 +0800</lastBuildDate><atom:link href="https://gohugo-theme-ananke.pages.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduce myself</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/first-post/</link>
      <pubDate>Mon, 13 Mar 2023 13:05:01 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/first-post/</guid>
      <description>Hey, I am zhangwei. I am a software engineer. Here will be my next place to record something.I will share my thoughts here, and most about technology.</description>
    </item>
    
    <item>
      <title>Go多协程爬取阿里云资源</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go%E5%B9%B6%E5%8F%91%E4%B8%8B%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E8%B5%84%E6%BA%90/</link>
      <pubDate>Thu, 28 Nov 2019 17:18:11 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go%E5%B9%B6%E5%8F%91%E4%B8%8B%E8%BD%BD%E9%98%BF%E9%87%8C%E4%BA%91%E8%B5%84%E6%BA%90/</guid>
      <description>用go写了个爬取好未来存放在阿里云oss的音频附件，代码如下： package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;github.com/aliyun/aliyun-oss-go-sdk/oss&amp;#34; ) var _ClassIds = []string{} const ( Endpoint string = &amp;#34;http://oss-cn-beijing.aliyuncs.com&amp;#34; AccessID string = &amp;#34;这里存放阿里云accessId&amp;#34; AccessKey string = &amp;#34;这里存放阿里云accessKey&amp;#34; RootPath string = &amp;#34;classrecord/&amp;#34; getLessonApi string = &amp;#34;获取大班ID API&amp;#34; getPaperApi string = &amp;#34;获取大班ID试题API&amp;#34; ) // todo 如果解析csv文件，这里创建一个struct 保存课程信息 // type CLassInfo struct { // Cid string // Cnum string // } type ClassInfo struct { Id int `json:&amp;#34;id&amp;#34;` LiveNumberId string `json:&amp;#34;liveNumberId&amp;#34;` } type Result struct { Result ClassInfo `json:&amp;#34;result&amp;#34;` } type Task struct { TaskId int64 `json:&amp;#34;taskId&amp;#34;` Stem string `json:&amp;#34;stem&amp;#34;` } type Paper struct { PaperId int64 `json:&amp;#34;paperId&amp;#34;` Tasks []Task `json:&amp;#34;tasks&amp;#34;` } //taskId&amp;gt;stem Map type type TaskMap map[string]string func iterationClassIdWorker(id int, path chan string, bk *oss.</description>
    </item>
    
    <item>
      <title>Quicksort</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/quicksort/</link>
      <pubDate>Wed, 09 Oct 2019 15:06:26 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/quicksort/</guid>
      <description>golang实现快速排序 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func QuickSort(slc []int) []int { middleIndex := len(slc) / 2 middleItem := slc[middleIndex] leftSlc := []int {} rightSlc := []int {} for i := 0; i &amp;lt; len(slc); i++ { if i == middleIndex { continue } if slc[i] &amp;lt;= middleItem { leftSlc = append(leftSlc, slc[i]) }else { rightSlc = append(rightSlc, slc[i]) } } return append(append(QuickSort(leftSlc), middleItem), QuickSort(rightSlc)...) } func main() { slc := []int {} for i := 0; i &amp;lt; 10; i++ { slc = append(slc, rand.</description>
    </item>
    
    <item>
      <title>ImplementDeepCopy</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/implementdeepcopy/</link>
      <pubDate>Fri, 27 Sep 2019 14:57:25 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/implementdeepcopy/</guid>
      <description>var toString = Object.prototype.toString; function isArray(arg) { toString.call(arg) === &amp;#34;[object array]&amp;#34; } function forEach(obj, fn) { if (typeof obj !== &amp;#39;object&amp;#39;) { return; } if (typeof fn !== &amp;#39;function&amp;#39;) { return; } if (isArray(obj)) { for (var i, l = obj.length; i &amp;lt; l; i++) { fn.call(null, obj[i], i) } } else { for (var key in obj) { if (obj.hasOwnProperty(key)) { fn.call(null, obj[key], key); } } } } function merge(/*obj1, obj2, obj3*/) { var result = {}; function assignValue(obj) { if (typeof result[key] === &amp;#39;object&amp;#39; &amp;amp;&amp;amp; obj ===&amp;#34;object&amp;#34; ){ merge(result[key], obj); } else if (typeof obj === &amp;#39;object&amp;#39;) { result[key] = merge({}, obj)	} else { result[key] = obj; } } for (var i = 0, l = arguments.</description>
    </item>
    
    <item>
      <title>Http Cors</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/http-cors/</link>
      <pubDate>Mon, 23 Sep 2019 17:30:57 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/http-cors/</guid>
      <description>CORS定义
CORS是W3C的一个标准，全称是：cross orgin resource sharing，中文翻译是：跨域资源共享；
浏览器出于安全的原因，对跨域的请求会做特殊处理；
跨域情况下，在浏览器接收到请求的数据时（此处需特别注意，跨域请求也是可以到达服务器的），浏览器会检查服务器的响应头里是否明确可以进行跨域资源共享，如果响应头里包含 Access-Control-Allow-Origin 则允许跨域请求数据，否者就是不允许跨域，浏览器检测无此字段，则认为不可跨域请求数据，就会报错，触发XmlHttpRequest的onerror事件。
http预检请求
http的预检请求也就是浏览器自行发送的option请求；
当使用除get、post、head方法以外的其他方法发起http请求时浏览器会发送option请求； 请求头包含除一下字段的其他字段 Accept Accept-Language Content-Language Last-Event-ID Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain 浏览器通过发送option请求确认服务器是否允许访问（查看Access-Control-Allow-Origin字段的值），如果允许跨域则向服务器正式发送请求，否者就拒绝发送。</description>
    </item>
    
    <item>
      <title>Linux用户和组</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/</link>
      <pubDate>Sun, 08 Sep 2019 10:11:49 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/</guid>
      <description>新建系统组mariadb，新建系统用户mariadb 例子1： 要求其没有家目录,且shell为/sbin/nologin;创建组用groupadd命令； 创建系统组：groupadd -r groupName
groupadd [options] group
创建用户用useradd命令；
useradd [options] LOGIN
创建系统用户：useradd -r userName
不创建家目录需要用到-M选项
为用户指定shell用-s选项
为用户指定组用-g选项
所以该题的答案为：
先创建系统组mariadb，groupadd -r mariadb 创建系统用户，useradd -r mariadb -s /sbin/nologin -M -g mariadb 例子2：新建GID为5000的组mageedu，新建用户gentoo，要求其家目录为/users/gentoo，密码同用户名 为组制定groupid用-g选项；
为用户设置密码用-p选项；
所以答案为：
groupadd -g 5000 mageedu useradd -s /users/gentoo gentoo -p gentoo 例子3：新建用户fedora，其家目录为/users/fedora，密码同用户名 答案为：useradd fedora -s /users/fedora
例子4：新建用户www，其家目录为/users/www；删除用户www，但保留其家目录 删除用户用userdel；
如果要同时删除用户家目录则用-f选项；
答案为：
useradd www -s /users/www userdel www 例子5：为用户gentoo和fedora新增附加组mageedu 更改用户信息用usermod命令；
usermod [options] LOGIN；
指定附加组用-G选项；
-G, &amp;ndash;groups GROUP1[,GROUP2,&amp;hellip;[,GROUPN]]]
答案为：</description>
    </item>
    
    <item>
      <title>Go Defer</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go-defer/</link>
      <pubDate>Wed, 04 Sep 2019 09:41:06 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go-defer/</guid>
      <description>defer 作用 go语言中有defer关键字；
其作用类似于js中的finally，用于清除函数所占系统资源；
defer 用法 defer用在一个函数的函数体内; defer关键词后跟一个函数调用，后面所跟的函数调用和普通的函数调用没有区别；
如果defer函数有返回值，则函数执行完毕之后返回值会被丢弃。
defer 关键字执行函数的时机：
外部函数执行return语句时 函数执行结束 goroutine报错（panick） 如果外部函数有return表达式，defer函数会在return表达式设置值之后，return之前执行； 比如：
// f returns 42 func f() (result int) { defer func() { // result is accessed after it was set to 6 by the return statement result *= 7 }() return 6 } defer函数可以访问外部函数的变量；
如果有多个defer表达式，执行顺序为从最后一个到第一个；
lock(l) defer unlock(l) // unlocking happens before surrounding function returns // prints 3 2 1 0 before surrounding function returns for i := 0; i &amp;lt;= 3; i++ { defer fmt.</description>
    </item>
    
    <item>
      <title>Go Function Closure</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go-function-closure/</link>
      <pubDate>Tue, 27 Aug 2019 13:42:13 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go-function-closure/</guid>
      <description>go语言中的closure（闭包） go语言和JavaScript都支持closure（闭包）；
匿名函数被常用来实现闭包，go语言中也支持匿名函数；
closure的定义是：一个函数可以访问其函数体外的变量，我们称这个函数为closure（闭包）；
如下：
package main import &amp;#34;fmt&amp;#34; // fibonacci is a function that returns // a function that returns an int. func fibonacci() func(int) int { a := 0 b := 0 return func(x int) int { if x == 0 { return 0 } if x == 1 { b = 1 return 1 } s := a + b a = b b = s return s } } func main() { f := fibonacci() for i := 0; i &amp;lt; 10; i++ { fmt.</description>
    </item>
    
    <item>
      <title>Go Pointer Receiver</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/go-pointer-receiver/</link>
      <pubDate>Mon, 26 Aug 2019 14:13:02 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/go-pointer-receiver/</guid>
      <description>golang struct类型 go语言中没有class概念，但有一个struct类型，可以实现class。 struct中可以包含基础类型做为其属性，比如boolean、string、int、float等， 实例化可通过v :=T{}，其中，打括号中是struct的属性值，类似面向对象语言中实例化一个class所用的new。
golang pointer类型 go语言中，如果一个变量存储的是另一个变量所在的地址，则这个变量的类型为pointer类型，也就是指针；
比如：
var house = &amp;#34;I am a string!&amp;#34; padr := &amp;amp;house 变量padr就是一个pointer类型的变量，其存储的是字符串house的地址； 打印出来，就类似“0xc000084030”， 打印类型，则为“*string” 在golang中，指针类型就是“*T”
golang methods with pointer receiver go语言中的方法可以被指针类型所接收，该值可以为pointe类型，通过这种关系，可以把struct和该方法关联；
这种隐式的给struct指定方法的方式可以引用一句名言：if it looks like a duck, work like a duck and quacks like a duck it must be a duck.
比如：
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) type Vertex struct { X, Y float64 } func (v Vertex) Abs() float64 { return math.</description>
    </item>
    
    <item>
      <title>Mysql Install</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/mysql-install/</link>
      <pubDate>Fri, 23 Aug 2019 11:47:07 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/mysql-install/</guid>
      <description>mac下安装mysql brew 安装方式 brew install mysql 等待安装完毕
启动mysql服务 brew services start mysql
命令行下登录mysql mysql -u root root账号默认没设置密码
设置root账号密码 UPDATE mysql.user SET Password=PASSWORD(&amp;lsquo;MyNewPass&amp;rsquo;) WHERE User=&amp;lsquo;root&amp;rsquo;; FLUSH PRIVILEGES; 密码要求特殊字符、大小写英文字符、数字； 密码不合格会报syntax error</description>
    </item>
    
    <item>
      <title>Css Inline</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/css-inline/</link>
      <pubDate>Fri, 16 Aug 2019 09:36:58 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/css-inline/</guid>
      <description>有个同事问我，说为啥我用span标签写了一个序列，内容换行怎么围绕着这个span标签了？？ 我说，这正是css行内元素的特性啊！ 如果不想被“围绕”，可以使用block元素，通过float或者是flex等都可以实现。 css需要去感悟，理解，而不仅仅是死记硬背。
如下： &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#39;div1&amp;#39;&amp;gt; &amp;lt;span id=&amp;#39;span1&amp;#39;&amp;gt;1&amp;lt;/span&amp;gt; &amp;lt;span id=&amp;#39;span2&amp;#39;&amp;gt;内容内容内容内容内容内容内容内容内容内容&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;style type=&amp;#39;text/css&amp;#39;&amp;gt; #div1{ width:100px; height:100px; background:red; } #span1{ background:black; color:#fff; padding:1px 5px; } #span2{ word-break:break-all; } &amp;lt;/style&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 效果： </description>
    </item>
    
    <item>
      <title>javascript 中 调用new操作符时候发生了什么？</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/new-operator/</link>
      <pubDate>Fri, 16 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/new-operator/</guid>
      <description> 第一步，创建一个空对象 第二步，空对象的__proto__指向constractor的prototype 第三步，用该空对象为this调用constractor ES6中Reflect.constructor函数和test.js中createClass实现同样功能 function createClass(constructor,args){ var o = {}; o.__proto__ = constructor.prototype; constructor.call(o,...args); return o; } function Animal(type,cando){ this.type = type; this.cando = cando; } Animal.prototype.showType = function () { console.log(&amp;#39;I am a &amp;#39; + this.type + &amp;#34;,and I can &amp;#34; + this.cando); } var cat = createClass(Animal,[&amp;#34;cat&amp;#34;,&amp;#34;捉老鼠&amp;#34;]); cat.showType(); </description>
    </item>
    
    <item>
      <title>javascript string formater</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/js-formater/</link>
      <pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/js-formater/</guid>
      <description>函数实现 function format(string) { var args = arguments; var pattern = new RegExp(&amp;#34;%([1-&amp;#34; + arguments.length + &amp;#34;])&amp;#34;, &amp;#34;g&amp;#34;); return String(string).replace(pattern, function (match, index) { return args[index]; }); }; 用法 console.log(format(&amp;#34;And the %1 want to know whose %2 you %3&amp;#34;, &amp;#34;papers&amp;#34;, &amp;#34;shirt&amp;#34;, &amp;#34;wear&amp;#34;)); </description>
    </item>
    
    <item>
      <title>贪吃蛇小游戏</title>
      <link>https://gohugo-theme-ananke.pages.dev/posts/snake/</link>
      <pubDate>Mon, 25 Mar 2013 09:51:02 +0800</pubDate>
      
      <guid>https://gohugo-theme-ananke.pages.dev/posts/snake/</guid>
      <description>贪吃蛇小游戏 &amp;lt;!DOCTYPE html PUBLIC &amp;#34;-//W3C//DTD XHTML 1.0 Transitional//EN&amp;#34; &amp;#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&amp;#34;&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;贪吃蛇 作者:记忆中的马肠河&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; window.onload = function () { var snake = { //移动方向 fangxiang: &amp;#34;left&amp;#34;, //蛇身 snakeBody: [], box: document.getElementById(&amp;#34;snakeBox&amp;#34;), //移动 move: function () { var timer = &amp;#34;&amp;#34;; //判断是否GameOver var isFailed = function () { //判断蛇头是否碰到蛇身 var isHeadRunIntoBody=function(){ var t=false; for(var i=0;i&amp;lt;snake.snakeBody.length-1;i++){ if(snake.snakeBody[snake.snakeBody.length-1].x==snake.snakeBody[i].x&amp;amp;&amp;amp; snake.snakeBody[snake.snakeBody.length-1].y==snake.snakeBody[i].y ){ t=true; break; } } return t; } //判断条件：是否蛇身碰到蛇头、是否蛇头碰到墙壁 if ( isHeadRunIntoBody()|| snake.</description>
    </item>
    
  </channel>
</rss>
